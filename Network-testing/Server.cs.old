using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Sockets;
using UnityEngine;
public class Server : MonoBehaviour
{
    
    public String Host = "localhost";
    public Int32 Port = 3344;

    private TcpListener listener = null;
    private TcpClient[] client = new TcpClient[4];
    private NetworkStream[] ns = new NetworkStream[4];
    private int i = 0;
    string msg;

    // Start is called before the first frame update
    void Awake()
    {
        listener = new TcpListener(Dns.GetHostEntry(Host).AddressList[0], Port);
        listener.Start();
        for(int j=0;j<4;j++)
        {
            client[j]=null;
            ns[j]=null;
        }
        Debug.Log("is listening");
    }

    // Update is called once per frame
    void Update()
    {
        if (client[i] == null)
        {
            if (listener.Pending())
            {
                client[i] = listener.AcceptTcpClient();
                Debug.Log("Connected to #"+i.ToString());
                if (i<2)
                    i++;
            }
            else
            {
                return;
            }
        }
        for(int j=0;j<i;j++)
        {
            ns[j] = client[j].GetStream();

            if ((ns[j] != null) && (ns[j].DataAvailable))
            {
                StreamReader reader = new StreamReader(ns[j]);
                msg = reader.ReadToEnd();
                Debug.Log("Client #"+j.ToString()+" sent:");
                Debug.Log(msg);
            }
        }
    }

    private void OnApplicationQuit()
    {
        if (listener != null)
            listener.Stop();
    }
    void checkConnection()
    {
        for(int j=0;j<i;j++)
        {
            bool blockingState = client[j].Blocking;
            try
            {
                byte[] tmp = new byte[1];

                client[j].Blocking = false;
                client[j].Send(tmp, 0, 0);
                Debug.Log("Still Connected to #"+ j.ToString());
            }
            catch (SocketException e)
            {
                // 10035 == WSAEWOULDBLOCK
                if (e.NativeErrorCode.Equals(10035))
                {
                    Debug.Log("Still Connected to #"+j.ToString()+" , but the Send would block");
                }
                else
                {
                    Debug.Log("Disconnected from #"+j.ToString()+": error code {0}!", e.NativeErrorCode);
                }
            }
            finally
            {
                client[j].Blocking = blockingState;
            }

            Debug.Log("Connected: {0} #"+j.ToString(), client[j].Connected);
        }
    }
}